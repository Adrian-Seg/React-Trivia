[{"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\index.js":"1","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\App.js":"2","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\reportWebVitals.js":"3","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\TriviaBoard\\TriviaBoard.js":"4","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\ImportedButton\\ImportedButton.js":"5","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\questions\\questions.js":"6","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\MainMenu\\MainMenu.js":"7","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\MainMenuBtn\\MainMenuBtn.js":"8","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\Options\\Options.js":"9","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\Clock\\Clock.js":"10","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\StartOver\\StartOver.js":"11"},{"size":547,"mtime":1610395058547,"results":"12","hashOfConfig":"13"},{"size":217,"mtime":1613368531464,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":5824,"mtime":1613361010946,"results":"16","hashOfConfig":"13"},{"size":958,"mtime":1613381965030,"results":"17","hashOfConfig":"13"},{"size":41646,"mtime":1611951779808,"results":"18","hashOfConfig":"13"},{"size":3830,"mtime":1613377086940,"results":"19","hashOfConfig":"13"},{"size":1157,"mtime":1613335002344,"results":"20","hashOfConfig":"13"},{"size":1646,"mtime":1613380379534,"results":"21","hashOfConfig":"13"},{"size":1362,"mtime":1613378749240,"results":"22","hashOfConfig":"13"},{"size":476,"mtime":1613338336885,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"kj0izs",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\index.js",[],["49","50"],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\App.js",[],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\reportWebVitals.js",[],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\TriviaBoard\\TriviaBoard.js",["51"],"import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport ImportedButton from '../../components/ImportedButton/ImportedButton';\r\nimport { Questions } from '../questions/questions';\r\n\r\n// Current index is the position in the array of Questions (Question Number)\r\nlet currentIndex = 0;\r\n\r\nclass TriviaBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            timer: 30,\r\n            question: \"\",\r\n            option1: \"\",\r\n            option2: \"\",\r\n            option3: \"\",\r\n            option4: \"\",\r\n            realAnswer: \"\",\r\n            playActive: true,\r\n\r\n            gameTimer: 0,\r\n        };\r\n    }\r\n\r\n    checkAnswer = (userSelected) => {\r\n        // Conditional to check if the users choice is the real answer, to add a point\r\n        if (userSelected === this.props.triviaArray[currentIndex].answer) {\r\n            this.setState({\r\n                score: this.state.score++,\r\n            })\r\n        }\r\n        // Calling next question function\r\n        this.nextQuestion();\r\n    }\r\n\r\n    nextQuestion = () => {\r\n        // Move to the next question\r\n        currentIndex++;\r\n        // Checking if the questions get to 20, to end game\r\n        if (currentIndex === 20) {\r\n            this.endGame();\r\n            this.setState({ playActive: false });\r\n        } else {\r\n            this.setState({\r\n                question: Questions[currentIndex].question,\r\n                option1: Questions[currentIndex].option1,\r\n                option2: Questions[currentIndex].option2,\r\n                option3: Questions[currentIndex].option3,\r\n                option4: Questions[currentIndex].option4,\r\n                realAnswer: Questions[currentIndex].answer,\r\n                score: this.state.score,\r\n                timer: 30,\r\n            })\r\n        }\r\n    }\r\n\r\n    endGame() {\r\n        this.setState({\r\n            question: \"\",\r\n            option1: \"\",\r\n            option2: \"\",\r\n            option3: \"\",\r\n            option4: \"\",\r\n            realAnswer: \"\",\r\n            score: this.state.score,\r\n            timer: \"30\",\r\n        })\r\n    }\r\n\r\n    // resetGame = () => {\r\n    //     this.setState({\r\n    //         question: \"\",\r\n    //         option1: \"\",\r\n    //         option2: \"\",\r\n    //         option3: \"\",\r\n    //         option4: \"\",\r\n    //         realAnswer: \"\",\r\n    //         score: 0,\r\n    //         timer: 30,\r\n    //     })\r\n    // }\r\n\r\n    finalScore = () => {\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1>\r\n                                End of Game friend! Your Score: {this.state.score}\r\n                            </h1>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    };\r\n\r\n    playArea = () => {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col className=\"d-flex justify-content-center optionsBG stats\">\r\n                                {/* Adding + 1 because the array starts at 0 */}\r\n                                <p>Question {currentIndex + 1} / 20</p>\r\n                            </Col>\r\n                            <Col className=\"d-flex justify-content-center optionsBG stats\">\r\n                                <p>Score: {this.state.score}</p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col className=\"d-flex justify-content-center optionsBG stats\">\r\n                                <p>Time Left: {this.state.timer}</p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <Container>\r\n                        <Row className=\"questArea optionsBG\">\r\n                            <Col xs={10} className=\"d-flex justify-content-center optionsBG\">\r\n                                <p> {this.props.triviaArray[currentIndex].question} </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <Container className=\"pt-3\">\r\n                        <Row>\r\n                            <Col className=\"d-flex justify-content-around\">\r\n                                <ImportedButton onClick={this.checkAnswer} value={this.props.triviaArray[currentIndex].option1} />\r\n                                <ImportedButton onClick={this.checkAnswer} value={this.props.triviaArray[currentIndex].option2} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"d-flex justify-content-around\">\r\n                                <ImportedButton onClick={this.checkAnswer} value={this.props.triviaArray[currentIndex].option3} />\r\n                                <ImportedButton onClick={this.checkAnswer} value={this.props.triviaArray[currentIndex].option4} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    render() {\r\n        return this.state.playActive ? <this.playArea /> : <this.finalScore />;\r\n    }\r\n    // TIMER\r\n    componentDidMount() {\r\n        // this.resetGame();\r\n        this.myInterval = setInterval(() => {\r\n            this.setState(prevState => ({\r\n                timer: prevState.timer - 1\r\n            }))\r\n            if (this.state.timer === 0) {\r\n                this.nextQuestion();\r\n            }\r\n        }, 1000)\r\n    }\r\n}\r\n\r\nexport default TriviaBoard;","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\ImportedButton\\ImportedButton.js",[],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\questions\\questions.js",[],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\MainMenu\\MainMenu.js",["52","53","54"],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\MainMenuBtn\\MainMenuBtn.js",["55"],"import { Questions, MediumQuestions, HardQuestions} from '../questions/questions'\r\nimport ImportedButton from '../ImportedButton/ImportedButton'\r\n\r\nconst MainMenuBtn = (importProps) => {\r\n    const handleClick = (props) => {\r\n        let randomQuestions;\r\n        let selectedQuestions;\r\n\r\n        switch(props) {\r\n            case\"Easy\":\r\n            randomQuestions = Questions.sort(() => Math.random() - 0.5);\r\n            selectedQuestions = randomQuestions.splice(0,20);\r\n            break;\r\n            case\"Medium\":\r\n            randomQuestions = MediumQuestions.sort(() => Math.random() - 0.5);\r\n            selectedQuestions = randomQuestions.splice(0,20);\r\n            break;\r\n            case\"Hard\":\r\n            randomQuestions = HardQuestions.sort(() => Math.random() - 0.5);\r\n            selectedQuestions = randomQuestions.splice(0,20);\r\n            default:\r\n            break;\r\n        }\r\n        importProps.onClick(props, selectedQuestions);\r\n    }\r\n    return (\r\n        <>\r\n            <ImportedButton className=\"diffBtn\" onClick={handleClick} value={importProps.choice}/>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default MainMenuBtn;","D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\Options\\Options.js",[],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\Clock\\Clock.js",[],"D:\\Users\\asegu\\Desktop\\Level 2\\WorkSpace\\React-Trivia\\src\\components\\StartOver\\StartOver.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":31,"column":24,"nodeType":"62","endLine":31,"endColumn":34},{"ruleId":"63","severity":1,"message":"64","line":5,"column":5,"nodeType":"65","messageId":"66","endLine":5,"endColumn":11},{"ruleId":"63","severity":1,"message":"67","line":6,"column":5,"nodeType":"65","messageId":"66","endLine":6,"endColumn":10},{"ruleId":"63","severity":1,"message":"68","line":7,"column":5,"nodeType":"65","messageId":"66","endLine":7,"endColumn":9},{"ruleId":"69","severity":1,"message":"70","line":21,"column":13,"nodeType":"71","messageId":"72","endLine":22,"endColumn":19},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","no-global-assign","no-unsafe-negation"]